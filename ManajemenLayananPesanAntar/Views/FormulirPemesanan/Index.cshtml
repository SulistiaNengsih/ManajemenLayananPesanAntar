@model IEnumerable<API_Manajemen_Layanan_Pesan_Antar.DTOs.ProductDto>

@{
    ViewData["Title"] = "Formulir Pemesanan";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <style>
        .product-card {
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h3>Formulir Pemesanan Toko Anton</h3>
        <h4>Langkah 1 dari 3</h4>
        <h5>Pilih produk yang ingin dipesan</h5>
        <div class="row">
            @foreach (var product in Model)
            {
                <div class="col-md-4 product-card" data-product-id="@product.id" data-price="@product.unit_price" data-stock="@product.available_qty">
                    <div class="card">
                        <!-- <img src="@Url.Content(product.image_url)" class="card-img-top" alt="@product.product_name"> -->
                        <div class="card-body">
                            <h5 class="card-title">@product.product_name</h5>
                            <p class="card-text">@product.product_desc</p>
                            <p class="card-text">Harga : Rp<span class="product-price">@string.Format("{0:N0}", product.unit_price)</span></p>
                            <p class="card-text">Stok  : <span class="product-stock">@product.available_qty</span></p>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <button class="btn btn-outline-secondary quantity-minus" type="button">-</button>
                                </div>
                                <input type="text" class="form-control quantity-input" value="0" readonly>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary quantity-plus" type="button">+</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <h6>Total Pembayaran: Rp<span id="total-payment">0</span></h6>

        <!-- Step 2: Order Details -->
        <h2 class="mt-5">Langkah 2 dari 3</h2>
        <h3>Masukan detail pesanan</h3>
        <div class="form-group">
            <label for="cust_name">Nama</label>
            <input type="text" class="form-control" id="cust_name">
        </div>
        <div class="form-group">
            <label for="cust_phone">Nomor telepon</label>
            <input type="number" class="form-control" id="cust_phone" pattern="[0-9]*" title="Nomor telepon harus berupa angka">
            <small id="phoneHelp" class="form-text text-muted">Nomor telepon harus diawali dengan 0 dan hanya angka yang diperbolehkan.</small>
        </div>
        <div class="form-group">
            <label for="delivery_address">Alamat Pengiriman</label>
            <textarea class="form-control" id="delivery_address" maxlength="500"></textarea>
        </div>
        <div class="form-group">
            <label for="delivery_remark">Patokan Alamat Pengiriman</label>
            <input type="text" class="form-control" id="delivery_remark">
        </div>
        <div class="form-group">
            <label for="cash_amount">Nominal Uang Tunai yang Disediakan</label>
            <div class="cash-choices">
                <button type="button" class="btn btn-outline-primary cash-choice" data-value="20000">Rp 20.000</button>
                <button type="button" class="btn btn-outline-primary cash-choice" data-value="50000">Rp 50.000</button>
                <button type="button" class="btn btn-outline-primary cash-choice" data-value="100000">Rp 100.000</button>
            </div>
            <input type="number" class="form-control mt-2" id="cash_amount" name="cash_amount" pattern="\d*" required>
        </div>

        <h4 class="mt-5">Langkah 3 dari 3</h4>
        <h5>Pilih titik lokasi pemesanan</h5>
        <div class="input-group mb-3">
            <input type="text" id="search-location" class="form-control" placeholder="Cari Lokasi">
            <div class="input-group-append">
                <button id="search-button" class="btn btn-primary" type="button">Cari</button>
            </div>
        </div>
        <div id="map" style="width: 100%; height: 400px;"></div>

        <!-- Hidden fields to store lat/long -->
        <input type="hidden" id="delivery_latitude">
        <input type="hidden" id="delivery_longitude">

        <button id="submit-order" class="btn btn-success mt-5">Tambahkan Pesanan</button>
    </div>

    <script>
        $(document).ready(function () {
            function formatRupiah(amount) {
                return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
            }

            function updateTotalPayment() {
                let total = 0;
                $('.product-card').each(function () {
                    const price = parseFloat($(this).data('price'));
                    const quantity = parseInt($(this).find('.quantity-input').val());
                    total += price * quantity;
                });
                $('#total-payment').text(formatRupiah(total));
            }

            $('.quantity-plus').click(function () {
                const $input = $(this).closest('.input-group').find('.quantity-input');
                const currentValue = parseInt($input.val());
                const stock = parseInt($(this).closest('.product-card').data('stock'));
                if (currentValue < stock) {
                    $input.val(currentValue + 1);
                    updateTotalPayment();
                }
            });

            $('.quantity-minus').click(function () {
                const $input = $(this).closest('.input-group').find('.quantity-input');
                const currentValue = parseInt($input.val());
                if (currentValue > 0) {
                    $input.val(currentValue - 1);
                    updateTotalPayment();
                }
            });

            $('.cash-choice').click(function () {
                const value = $(this).data('value');
                $('#cash_amount').val(value);
            });

            $('#cash_amount').on('input', function () {
                let value = $(this).val().replace(/\D/g, '');
                $(this).val(formatRupiah(value));
            });
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC-JyLGRBCn7MzlWDY7xpCXhmLSXnxR1X0&callback=initMap&libraries=places" async defer></script>
    <script>
        let map;
        let marker;
        let autocomplete;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: -6.2088, lng: 106.8456 },
                zoom: 12,
            });

            marker = new google.maps.Marker({
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP,
                position: { lat: -6.2088, lng: 106.8456 },
            });

            marker.addListener("dragend", (e) => {
                document.getElementById("delivery_latitude").value = marker.getPosition().lat();
                document.getElementById("delivery_longitude").value = marker.getPosition().lng();
            });

            // Initialize Autocomplete service
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById("search-location")
            );
            autocomplete.bindTo("bounds", map);

            // When a place is selected, move the map to that location
            autocomplete.addListener("place_changed", () => {
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    alert("No details available for input: '" + place.name + "'");
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                marker.setPosition(place.geometry.location);
                map.panTo(place.geometry.location);
                map.setZoom(17);
                document.getElementById("delivery_latitude").value = place.geometry.location.lat();
                document.getElementById("delivery_longitude").value = place.geometry.location.lng();
            });
        }

        function searchLocation() {
            const searchTerm = document.getElementById("search-location").value;
            if (!searchTerm) {
                return; // Handle empty search term
            }

            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ address: searchTerm }, (results, status) => {
                if (status === google.maps.GeocoderStatus.OK) {
                    const location = results[0].geometry.location;
                    map.setCenter(location);
                    marker.setPosition(location);
                    document.getElementById("delivery_latitude").value = results[0].geometry.location.lat();
                    document.getElementById("delivery_longitude").value = results[0].geometry.location.lng();
                    console.log('delivery latitude:', document.getElementById("delivery_latitude").valu);  // Debugging step: Log order details
                    console.log('delivery longitude:', document.getElementById("delivery_longitude").value);  // Debugging step: Log order details
                } else {
                    alert("Location not found: " + status);
                }
            });
        }

        document.getElementById("search-button").addEventListener("click", searchLocation);

        document.getElementById("search-location").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                searchLocation();
            }
        });

        function collectOrderItems() {
            const orderItems = [];
            const productCards = document.querySelectorAll(".product-card");
            productCards.forEach(card => {
                const productId = card.getAttribute("data-product-id");
                const productQuantity = card.querySelector(".quantity-input").value;
                if (productQuantity > 0) {
                    orderItems.push({
                        product_id: parseInt(productId),
                        order_qty: parseInt(productQuantity)
                    });
                }
            });
            console.log('Order Items:', orderItems);  // Debugging step: Log order details
            return orderItems;
        }

        function validateOrderItems() {
            const orderItems = collectOrderItems();
            if (orderItems.length === 0) {
                alert('Pilih setidaknya satu item pesanan.');
                return false;
            }
            return true;
        }

        // Fungsi untuk memeriksa apakah detail pesanan tidak kosong
        function validateOrderDetails() {
            const custName = $('#cust_name').val();
            const custPhone = $('#cust_phone').val();
            const deliveryAddress = $('#delivery_address').val();
            const deliveryRemark = $('#delivery_remark').val();
            const locationName = $('#search-location').val();
            const cashAmount = $('#cash_amount').val();

            if (!custName || !custPhone || !deliveryAddress || !deliveryRemark || !locationName || !cashAmount) {
                alert('Semua field detail pesanan harus diisi.');
                return false;
            }
            return true;
        }

        document.getElementById("submit-order").addEventListener("click", function () {
            if (!validateOrderItems() || !validateOrderDetails()) {
                return false;
            }

            const phoneNumber = $('#cust_phone').val();
            if (!/^0\d+$/.test(phoneNumber)) {
                alert('Nomor telepon harus diawali dengan 0 dan berupa angka');
                return false;
            }

            console.log('Submit Order button clicked');  // Add this line to check if the button click is detected

            // Menampilkan konfirmasi
            const confirmation = confirm('Apakah Anda yakin ingin membuat pesanan ini?');
            if (confirmation) {
                // Mengirimkan order jika pengguna mengkonfirmasi
                const orderItems = collectOrderItems();
                const orderDetails = {
                    cust_name: $('#cust_name').val(),
                    cust_phone: $('#cust_phone').val(),
                    delivery_address: $('#delivery_address').val(),
                    delivery_remark: $('#delivery_remark').val(),
                    location_name: $('#search-location').val(),
                    delivery_latitude: $('#delivery_latitude').val(),
                    delivery_longitude: $('#delivery_longitude').val(),
                    cash_amount: parseInt($('#cash_amount').val())
                };

                fetch('/order/create_order_with_details', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        aoiReq: orderItems,
                        aodReq: orderDetails
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        alert('Order berhasil dibuat.');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Terjadi kesalahan saat mengirimkan pesanan.');
                    });
            } else {
                // Batal mengirimkan order jika pengguna tidak mengkonfirmasi
                return false;
            }
        });
    </script>
</body>
</html>
